<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据结构与算法——初级算法</title>
      <link href="/posts/c9fcb2e0.html"/>
      <url>/posts/c9fcb2e0.html</url>
      
        <content type="html"><![CDATA[<h1 id="初级算法"><a href="#初级算法" class="headerlink" title="初级算法"></a>初级算法</h1><span id="more"></span><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="一：删除排序数组中的重复项"><a href="#一：删除排序数组中的重复项" class="headerlink" title="一：删除排序数组中的重复项"></a>一：删除排序数组中的重复项</h3><hr><p>给你一个<strong>升序排列</strong>的数组<strong>nums</strong>,请你<strong>原地</strong>删除重复出现的元素,使每个元素<strong>只出现一次</strong>，返回删除后数组的新长度。元素的<strong>相对顺序</strong>应该保持一致。</p><p>由于在某些语言中不能改变数组的长度，所以必须将结果放在数组nums的第一部分。更规范地说，如果在删除重复项之后有<strong>k</strong>个元素，那么<strong>nums</strong>的前<strong>k</strong>个元素应该保存最终结果。</p><p>将最终结果插入<strong>nums</strong>的前<strong>k</strong>个位置后返回k。</p><p>不要使用额外的空间，你必须在<strong>原地修改输入数组</strong>，并在使用O(1)额外空间的条件下完成。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>输入：nums&#x3D;[0,0,1,1,1,2,2,3,3,4]<br>输出: 5,nums&#x3D;[0,1,2,3,4]<br>解释: 函数应该返回新的长度<strong>5</strong>，并且原数组<em>nums</em>的前五个元素被修改为<strong>0，1，2，3，4</strong>。不需要考虑数组中超出新长度后面的元素。</p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p><strong>方法：双指针</strong></p><p>这道题目的要求是：对给定的有序数组<em>nums</em>删除重复元素，在删除重复元素之后，每个元素只出现一次，并返回新的长度，上述操作必须通过原地修改数组的方法，使用<em>O(1)</em> 的空间复杂度完成。</p><p>由于给定的数组<em>nums</em>有序，因此对于任意的<strong>i&lt;j</strong>，如果nums[i]&#x3D;nums[j],则对任意i&lt;&#x3D;k&lt;&#x3D;j,必有nums[i]&#x3D;nums[k]&#x3D;nums[j],即相等的元素在数组中的下标一定是连续的。利用数组有序的特点，可以通过<strong>双指针</strong>的方法删除重复元素。</p><p>如果数组<em>nums</em>的长度为0，则数组不包含任何元素，因此返回0。</p><p>当数组<em>nums</em>的长度大于0时，数组中至少包含一个元素，在删除重复元素之后也至少剩下一个元素，因此nums[0]保持原状即可，从下标1开始删除重复元素。</p><p>定义两个指针<em>fast</em>和<em>slow</em>分别为快指针和慢指针，快指针表示遍历数组到达的下标位置，慢指针表示下一个不同元素要填入的下标位置，初始时两个指针都指向下标1。</p><p>假设<em>nums</em>的长度为n，将快指针fast一次遍历从1到n-1的每个位置，对于每个位置而言，如果nums[fast]≠nums[fast-1],说明nums[fast]和之前的元素都不同，因此将nums[fast]的值复制到nums[slow],然后将slow的值加1，即指向下一个位置。</p><p>遍历结束之后，从nums[0]到nums[slow-1]的每个元素都不相同，且包含原数组中的每个不同的元素，因此新的长度即为slow，返回slow即可。</p><p><strong>代码实现</strong></p><p><strong>C：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">int removeDuplicates(int *nums,int numsSize)</span><br><span class="line">&#123;</span><br><span class="line">    if(numsSize==0)</span><br><span class="line">    &#123;</span><br><span class="line">       return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    int fast=1,slow=1;</span><br><span class="line">    while(fast&lt;numsSize)</span><br><span class="line">    &#123;</span><br><span class="line">        if(nums[fast]!=nums[fast-1])</span><br><span class="line">        &#123;</span><br><span class="line">            nums[slow]=nums[fast];</span><br><span class="line">            ++slow;</span><br><span class="line">        &#125;</span><br><span class="line">        ++fast;</span><br><span class="line">    &#125;</span><br><span class="line">    return slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>C++：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int removeDuplicates(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int n = nums.size();</span><br><span class="line">        if (n == 0) &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        int fast = 1, slow = 1;</span><br><span class="line">        while (fast &lt; n) &#123;</span><br><span class="line">            if (nums[fast] != nums[fast - 1]) &#123;</span><br><span class="line">                nums[slow] = nums[fast];</span><br><span class="line">                ++slow;</span><br><span class="line">            &#125;</span><br><span class="line">            ++fast;</span><br><span class="line">        &#125;</span><br><span class="line">        return slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><p>*时间复杂度：O(n),其中n是数组的长度。快指针和慢指针最多各移动n次</p><p>*空间复杂度：O(1)，只需要使用常数的额外空间<br>nums[k]&#x3D;nums[j]，即相等的元素在数组中的下标一定是连续的。利用数组有序的特点，可以通过双指针的方法删除重复元素。</p><hr><p>作者：LeetCode-Solution</p><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/solution/shan-chu-pai-xu-shu-zu-zhong-de-zhong-fu-tudo/">链接</a></p><p>来源：力扣（LeetCode）</p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++生成随机数</title>
      <link href="/posts/88a3a658.html"/>
      <url>/posts/88a3a658.html</url>
      
        <content type="html"><![CDATA[<h1 id="C-生成随机数和字目"><a href="#C-生成随机数和字目" class="headerlink" title="C++生成随机数和字目"></a>C++生成随机数和字目</h1><span id="more"></span><h2 id="随机产生整数-text"><a href="#随机产生整数-text" class="headerlink" title="随机产生整数 text"></a>随机产生整数 text</h2><p>C++库中存在名为rand()的函数，每次进行调用时都会返回一个非负整数。使用rand()的前提是调用<strong>cstdlib</strong>头文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;cstdlib&gt;</span><br></pre></td></tr></table></figure><p>直接调用rand()即可:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//如果rand函数产生一个随机数&gt;0，请使用rand()产生60~100的随机数</span><br><span class="line">int a = rand() % 41 + 60;</span><br><span class="line">//如果rand函数产生一个随机数&gt;0，请使用rand()产生a~z的随机字母</span><br><span class="line">char b = rand() % 26 + &#x27;a&#x27;;</span><br></pre></td></tr></table></figure><p>rand()%a生成的是0-(a-1)之间的数字。<br>rand()%a+b表示生成b~(a+b-1)之间的整数。</p><h2 id="随机产生小数"><a href="#随机产生小数" class="headerlink" title="随机产生小数"></a>随机产生小数</h2><p>rand()%a产生的是0-(a-1)之间的整数，如果想要得到一个0~1之间的小数，则可以直接除以a，这样便可以获得一个小数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rand()%10/(double)10;</span><br></pre></td></tr></table></figure><h2 id="产生变化的随机数"><a href="#产生变化的随机数" class="headerlink" title="产生变化的随机数"></a>产生变化的随机数</h2><p>以上生成的随机数存在一个问题，那就是产生的随机数一直不变，那如何生成变化的随机数呢？<br>这里就要用到<strong>srand()</strong>,srand()可以用来设置rand()产生随机数时的随机数种子，通过设置不同的种子，可以获取到不同的随机数序列。<br>默认的种子数是1，若要获取到变化的随机数，还需引入<strong>time()</strong>.<br>因为time()是变化的，其作用是获取当前时间。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">srand(time(0));</span><br></pre></td></tr></table></figure><p>使用time(0)函数需要引入<strong>ctime</strong>头文件。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码块演示</title>
      <link href="/posts/d8d3d04e.html"/>
      <url>/posts/d8d3d04e.html</url>
      
        <content type="html"><![CDATA[<h1 id="我的博客文章编写"><a href="#我的博客文章编写" class="headerlink" title="我的博客文章编写"></a>我的博客文章编写</h1><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//cout代表输出设备（终端，屏幕）</span></span><br><span class="line"><span class="comment">//&lt;&lt;右移符号代表数据的流向，可以进行链式操作</span></span><br><span class="line"><span class="comment">//endl指换行</span></span><br><span class="line"><span class="comment">//先输出hello world在输出endl</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; endl &lt;&lt; <span class="string">&quot;my name is shiki&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> data = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; data &gt;&gt; num;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;data=&quot;</span> &lt;&lt; data &lt;&lt; <span class="string">&quot;,num=&quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="number">0b00001010</span> &lt;&lt; endl;<span class="comment">//10 二进制以0b开头</span></span><br><span class="line">cout &lt;&lt; <span class="number">0123</span> &lt;&lt; endl;<span class="comment">//83</span></span><br><span class="line">cout &lt;&lt; <span class="number">0xab</span> &lt;&lt; endl;<span class="comment">//171</span></span><br><span class="line"><span class="comment">//cout需要使用bitset&lt;位数&gt;(数值)，位数一般都是8，16，32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> ch = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入一个字符：&quot;</span>;</span><br><span class="line"><span class="comment">//cin会判断ch的类型为char，一次只能获取一个字符</span></span><br><span class="line">cin &gt;&gt; ch;</span><br><span class="line"><span class="comment">//大小写转换</span></span><br><span class="line"><span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">ch = ch - (<span class="string">&#x27;a&#x27;</span> - <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">ch = ch + (<span class="string">&#x27;a&#x27;</span> - <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ch=&quot;</span> &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">short</span> data = <span class="number">0x8080</span>;<span class="comment">//存是原码存储</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">bitset</span>&lt;<span class="number">16</span>&gt;(data) &lt;&lt; endl;<span class="comment">//取是补码取值</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;data=&quot;</span> &lt;&lt; data &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test04</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> data = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span>* p = (<span class="type">int</span>*)&amp;data;</span><br><span class="line">*p = <span class="number">2000</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;*p=&quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;data=&quot;</span> &lt;&lt; data &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test05</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="type">int</span> data = <span class="number">0</span>;<span class="comment">//data将放入寄存器中 ,提取速度加快</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//尽量不要对寄存器变量取地址</span></span><br><span class="line"><span class="comment">//取地址是对内存的操作，而寄存器中的数据不在内存中</span></span><br><span class="line">cout &lt;&lt; &amp;data &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//register修饰的变量 只是尽量放入寄存器中,因为寄存器数量有限</span></span><br><span class="line"><span class="comment">//从寄存器中取有可能导致更新数据不及时，这时就需要强制访问内存修饰词</span></span><br><span class="line"><span class="comment">//volatile int data = 0;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test05</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客文章</title>
      <link href="/posts/b24dd347.html"/>
      <url>/posts/b24dd347.html</url>
      
        <content type="html"><![CDATA[<h1 id="我的博客文章编写"><a href="#我的博客文章编写" class="headerlink" title="我的博客文章编写"></a>我的博客文章编写</h1><span id="more"></span><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>使用标题时需要#号  </p><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>这是第一个段落的内容</p><p>这是第二个段落的内容  </p><h2 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h2><blockquote><p>这是一段引用段落，将会被高亮显示   </p></blockquote><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p><a href="https://www.baidu.com/">百度</a></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="https://32comic.com/wp-content/uploads/2022/10/wxsync-2022-10-401295ea852fe44da24d4ac73f39e648-480x255.jpeg" alt="像素画"></p><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>*无序列表项一<br>*无序列表项二<br>*无序列表项三</p><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>1.有序列表1<br>2.有序列表2<br>3.有序列表3  </p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><hr><hr><hr><hr><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;  }    div#menus {    font-family: "ZhuZiAYuanJWD";  }  h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;  }  a.article-title,  a.blog-slider__title,  a.categoryBar-list-link,  h1.post-title {    font-family: ZhuZiAYuanJWD;  }    .iconfont {    font-family: "iconfont" !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;  }    /* 时间轴生肖icon */  svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;  }    .icon-zhongbiao::before {    color: #f7c768;  }    /* bilibli番剧插件 */  #article-container .bangumi-tab.bangumi-active {    background: var(--anzhiyu-theme);    color: var(--anzhiyu-ahoverbg);    border-radius: 10px;  }  a.bangumi-tab:hover {    text-decoration: none !important;  }  .bangumi-button:hover {    background: var(--anzhiyu-theme) !important;    border-radius: 10px !important;    color: var(--anzhiyu-ahoverbg) !important;  }  a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;  }  .bangumi-button {    padding: 5px 10px !important;  }    a.bangumi-tab {    padding: 5px 10px !important;  }  svg.icon.faa-tada {    font-size: 1.1em;  }  .bangumi-info-item {    border-right: 1px solid #f2b94b;  }  .bangumi-info-item span {    color: #f2b94b;  }  .bangumi-info-item em {    color: #f2b94b;  }    /* 解决artitalk的图标问题 */  #uploadSource > svg {    width: 1.19em;    height: 1.5em;  }    /*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */  #page-header:not(.not-top-img):before {    background-color: transparent !important;  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);  }    /* 文章页面正文背景 */  div#post {    background: rgba(255, 255, 255, 0.9);  }    /* 分页页面 */  div#page {    background: rgba(255, 255, 255, 0.9);  }    /* 归档页面 */  div#archive {    background: rgba(255, 255, 255, 0.9);  }    /* 标签页面 */  div#tag {    background: rgba(255, 255, 255, 0.9);  }    /* 分类页面 */  div#category {    background: rgba(255, 255, 255, 0.9);  }    /*夜间模式伪类遮罩层透明*/  [data-theme="dark"] #recent-posts > .recent-post-item {    background: #121212;  }    [data-theme="dark"] .card-widget {    background: #121212 !important;  }    [data-theme="dark"] div#post {    background: #121212 !important;  }    [data-theme="dark"] div#tag {    background: #121212 !important;  }    [data-theme="dark"] div#archive {    background: #121212 !important;  }    [data-theme="dark"] div#page {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: transparent !important;  }  /* 页脚透明 */  #footer {    background: transparent !important;  }    /* 头图透明 */  #page-header {    background: transparent !important;  }    #rightside > div > button {    border-radius: 5px;  }    /* 滚动条 */    ::-webkit-scrollbar {    width: 10px;    height: 10px;  }    ::-webkit-scrollbar-thumb {    background-color: #425aef;    border-radius: 2em;  }    ::-webkit-scrollbar-corner {    background-color: transparent;  }    ::-moz-selection {    color: #fff;    background-color: #425aef;  }    /* 音乐播放器 */    /* .aplayer .aplayer-lrc {    display: none !important;  } */    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */  }    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */  }    .aplayer.aplayer-fixed {    z-index: 999999 !important;  }    /* 评论框  */  .vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;  }    /* 设置评论框 */    .vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;  }    /* 鼠标图标 */  body {    cursor: url("/img/x1.cur"), auto;  }  a,  [type="button"]:not(:disabled),  [type="reset"]:not(:disabled),  [type="submit"]:not(:disabled),  button:not(:disabled) {    cursor: url("/img/x2.cur"), auto !important;  }  /* md网站下划线 */  #article-container a:hover {    text-decoration: none !important;  }    #article-container #hpp_talk p img {    display: inline;  }    /* 404页面 */  #error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);  }    #error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;  }    #error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #425aef;    background-position: center;    background-size: cover;  }    #error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;  }  #error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;  }  #error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;  }  #error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);  }    #body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;  }    #body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;  }    #body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;  }    #body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;  }    #body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--anzhiyu-card-bg);    display: flex;  }    #body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;  }    #body-wrap.error .aside-list .aside-list-item .content time {    display: none;  }    /* 代码框主题 */  #article-container figure.highlight {    border-radius: 10px;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签页</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
